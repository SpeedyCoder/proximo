// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proximo.proto

package proto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Offset int32

const (
	OFFSET_DEFAULT Offset = 0
	OFFSET_NEWEST  Offset = 1
	OFFSET_OLDEST  Offset = 2
)

var Offset_name = map[int32]string{
	0: "OFFSET_DEFAULT",
	1: "OFFSET_NEWEST",
	2: "OFFSET_OLDEST",
}
var Offset_value = map[string]int32{
	"OFFSET_DEFAULT": 0,
	"OFFSET_NEWEST":  1,
	"OFFSET_OLDEST":  2,
}

func (Offset) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{0}
}

type Message struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ConsumerRequest struct {
	// expected if this is a start request
	StartRequest *StartConsumeRequest `protobuf:"bytes,2,opt,name=startRequest,proto3" json:"startRequest,omitempty"`
	// expected if this is a confirmation
	Confirmation *Confirmation `protobuf:"bytes,3,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
}

func (m *ConsumerRequest) Reset()      { *m = ConsumerRequest{} }
func (*ConsumerRequest) ProtoMessage() {}
func (*ConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{1}
}
func (m *ConsumerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRequest.Merge(dst, src)
}
func (m *ConsumerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRequest proto.InternalMessageInfo

func (m *ConsumerRequest) GetStartRequest() *StartConsumeRequest {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *ConsumerRequest) GetConfirmation() *Confirmation {
	if m != nil {
		return m.Confirmation
	}
	return nil
}

type StartConsumeRequest struct {
	Topic         string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Consumer      string `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	InitialOffset Offset `protobuf:"varint,3,opt,name=initial_offset,json=initialOffset,proto3,enum=proximo.Offset" json:"initial_offset,omitempty"`
}

func (m *StartConsumeRequest) Reset()      { *m = StartConsumeRequest{} }
func (*StartConsumeRequest) ProtoMessage() {}
func (*StartConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{2}
}
func (m *StartConsumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartConsumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartConsumeRequest.Merge(dst, src)
}
func (m *StartConsumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartConsumeRequest proto.InternalMessageInfo

func (m *StartConsumeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *StartConsumeRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *StartConsumeRequest) GetInitialOffset() Offset {
	if m != nil {
		return m.InitialOffset
	}
	return OFFSET_DEFAULT
}

type Confirmation struct {
	MsgID string `protobuf:"bytes,1,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (m *Confirmation) Reset()      { *m = Confirmation{} }
func (*Confirmation) ProtoMessage() {}
func (*Confirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{3}
}
func (m *Confirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Confirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Confirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Confirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Confirmation.Merge(dst, src)
}
func (m *Confirmation) XXX_Size() int {
	return m.Size()
}
func (m *Confirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_Confirmation.DiscardUnknown(m)
}

var xxx_messageInfo_Confirmation proto.InternalMessageInfo

func (m *Confirmation) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

type PublisherRequest struct {
	// expected if this is a start request
	StartRequest *StartPublishRequest `protobuf:"bytes,2,opt,name=startRequest,proto3" json:"startRequest,omitempty"`
	// expected if this is a message
	Msg *Message `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PublisherRequest) Reset()      { *m = PublisherRequest{} }
func (*PublisherRequest) ProtoMessage() {}
func (*PublisherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{4}
}
func (m *PublisherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublisherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublisherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublisherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublisherRequest.Merge(dst, src)
}
func (m *PublisherRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublisherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublisherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublisherRequest proto.InternalMessageInfo

func (m *PublisherRequest) GetStartRequest() *StartPublishRequest {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *PublisherRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StartPublishRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *StartPublishRequest) Reset()      { *m = StartPublishRequest{} }
func (*StartPublishRequest) ProtoMessage() {}
func (*StartPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_proximo_aec2e7cb430dcb60, []int{5}
}
func (m *StartPublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartPublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartPublishRequest.Merge(dst, src)
}
func (m *StartPublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartPublishRequest proto.InternalMessageInfo

func (m *StartPublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "proximo.Message")
	proto.RegisterType((*ConsumerRequest)(nil), "proximo.ConsumerRequest")
	proto.RegisterType((*StartConsumeRequest)(nil), "proximo.StartConsumeRequest")
	proto.RegisterType((*Confirmation)(nil), "proximo.Confirmation")
	proto.RegisterType((*PublisherRequest)(nil), "proximo.PublisherRequest")
	proto.RegisterType((*StartPublishRequest)(nil), "proximo.StartPublishRequest")
	proto.RegisterEnum("proximo.Offset", Offset_name, Offset_value)
}
func (x Offset) String() string {
	s, ok := Offset_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ConsumerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsumerRequest)
	if !ok {
		that2, ok := that.(ConsumerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartRequest.Equal(that1.StartRequest) {
		return false
	}
	if !this.Confirmation.Equal(that1.Confirmation) {
		return false
	}
	return true
}
func (this *StartConsumeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartConsumeRequest)
	if !ok {
		that2, ok := that.(StartConsumeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if this.Consumer != that1.Consumer {
		return false
	}
	if this.InitialOffset != that1.InitialOffset {
		return false
	}
	return true
}
func (this *Confirmation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Confirmation)
	if !ok {
		that2, ok := that.(Confirmation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgID != that1.MsgID {
		return false
	}
	return true
}
func (this *PublisherRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublisherRequest)
	if !ok {
		that2, ok := that.(PublisherRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartRequest.Equal(that1.StartRequest) {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *StartPublishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartPublishRequest)
	if !ok {
		that2, ok := that.(StartPublishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Message{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsumerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ConsumerRequest{")
	if this.StartRequest != nil {
		s = append(s, "StartRequest: "+fmt.Sprintf("%#v", this.StartRequest)+",\n")
	}
	if this.Confirmation != nil {
		s = append(s, "Confirmation: "+fmt.Sprintf("%#v", this.Confirmation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartConsumeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.StartConsumeRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "Consumer: "+fmt.Sprintf("%#v", this.Consumer)+",\n")
	s = append(s, "InitialOffset: "+fmt.Sprintf("%#v", this.InitialOffset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Confirmation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.Confirmation{")
	s = append(s, "MsgID: "+fmt.Sprintf("%#v", this.MsgID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublisherRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PublisherRequest{")
	if this.StartRequest != nil {
		s = append(s, "StartRequest: "+fmt.Sprintf("%#v", this.StartRequest)+",\n")
	}
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartPublishRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.StartPublishRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProximo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageSourceClient is the client API for MessageSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageSourceClient interface {
	Consume(ctx context.Context, opts ...grpc.CallOption) (MessageSource_ConsumeClient, error)
}

type messageSourceClient struct {
	cc *grpc.ClientConn
}

func NewMessageSourceClient(cc *grpc.ClientConn) MessageSourceClient {
	return &messageSourceClient{cc}
}

func (c *messageSourceClient) Consume(ctx context.Context, opts ...grpc.CallOption) (MessageSource_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageSource_serviceDesc.Streams[0], "/proximo.MessageSource/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSourceConsumeClient{stream}
	return x, nil
}

type MessageSource_ConsumeClient interface {
	Send(*ConsumerRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageSourceConsumeClient struct {
	grpc.ClientStream
}

func (x *messageSourceConsumeClient) Send(m *ConsumerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSourceConsumeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSourceServer is the server API for MessageSource service.
type MessageSourceServer interface {
	Consume(MessageSource_ConsumeServer) error
}

func RegisterMessageSourceServer(s *grpc.Server, srv MessageSourceServer) {
	s.RegisterService(&_MessageSource_serviceDesc, srv)
}

func _MessageSource_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSourceServer).Consume(&messageSourceConsumeServer{stream})
}

type MessageSource_ConsumeServer interface {
	Send(*Message) error
	Recv() (*ConsumerRequest, error)
	grpc.ServerStream
}

type messageSourceConsumeServer struct {
	grpc.ServerStream
}

func (x *messageSourceConsumeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSourceConsumeServer) Recv() (*ConsumerRequest, error) {
	m := new(ConsumerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proximo.MessageSource",
	HandlerType: (*MessageSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _MessageSource_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proximo.proto",
}

// MessageSinkClient is the client API for MessageSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageSinkClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (MessageSink_PublishClient, error)
}

type messageSinkClient struct {
	cc *grpc.ClientConn
}

func NewMessageSinkClient(cc *grpc.ClientConn) MessageSinkClient {
	return &messageSinkClient{cc}
}

func (c *messageSinkClient) Publish(ctx context.Context, opts ...grpc.CallOption) (MessageSink_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageSink_serviceDesc.Streams[0], "/proximo.MessageSink/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSinkPublishClient{stream}
	return x, nil
}

type MessageSink_PublishClient interface {
	Send(*PublisherRequest) error
	Recv() (*Confirmation, error)
	grpc.ClientStream
}

type messageSinkPublishClient struct {
	grpc.ClientStream
}

func (x *messageSinkPublishClient) Send(m *PublisherRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSinkPublishClient) Recv() (*Confirmation, error) {
	m := new(Confirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSinkServer is the server API for MessageSink service.
type MessageSinkServer interface {
	Publish(MessageSink_PublishServer) error
}

func RegisterMessageSinkServer(s *grpc.Server, srv MessageSinkServer) {
	s.RegisterService(&_MessageSink_serviceDesc, srv)
}

func _MessageSink_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSinkServer).Publish(&messageSinkPublishServer{stream})
}

type MessageSink_PublishServer interface {
	Send(*Confirmation) error
	Recv() (*PublisherRequest, error)
	grpc.ServerStream
}

type messageSinkPublishServer struct {
	grpc.ServerStream
}

func (x *messageSinkPublishServer) Send(m *Confirmation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSinkPublishServer) Recv() (*PublisherRequest, error) {
	m := new(PublisherRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proximo.MessageSink",
	HandlerType: (*MessageSinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _MessageSink_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proximo.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProximo(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProximo(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ConsumerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProximo(dAtA, i, uint64(m.StartRequest.Size()))
		n1, err := m.StartRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Confirmation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProximo(dAtA, i, uint64(m.Confirmation.Size()))
		n2, err := m.Confirmation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *StartConsumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartConsumeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProximo(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.Consumer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProximo(dAtA, i, uint64(len(m.Consumer)))
		i += copy(dAtA[i:], m.Consumer)
	}
	if m.InitialOffset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProximo(dAtA, i, uint64(m.InitialOffset))
	}
	return i, nil
}

func (m *Confirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Confirmation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MsgID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProximo(dAtA, i, uint64(len(m.MsgID)))
		i += copy(dAtA[i:], m.MsgID)
	}
	return i, nil
}

func (m *PublisherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublisherRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProximo(dAtA, i, uint64(m.StartRequest.Size()))
		n3, err := m.StartRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Msg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProximo(dAtA, i, uint64(m.Msg.Size()))
		n4, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StartPublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartPublishRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProximo(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	return i, nil
}

func encodeVarintProximo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovProximo(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProximo(uint64(l))
	}
	return n
}

func (m *ConsumerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartRequest != nil {
		l = m.StartRequest.Size()
		n += 1 + l + sovProximo(uint64(l))
	}
	if m.Confirmation != nil {
		l = m.Confirmation.Size()
		n += 1 + l + sovProximo(uint64(l))
	}
	return n
}

func (m *StartConsumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovProximo(uint64(l))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovProximo(uint64(l))
	}
	if m.InitialOffset != 0 {
		n += 1 + sovProximo(uint64(m.InitialOffset))
	}
	return n
}

func (m *Confirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgID)
	if l > 0 {
		n += 1 + l + sovProximo(uint64(l))
	}
	return n
}

func (m *PublisherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartRequest != nil {
		l = m.StartRequest.Size()
		n += 1 + l + sovProximo(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovProximo(uint64(l))
	}
	return n
}

func (m *StartPublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovProximo(uint64(l))
	}
	return n
}

func sovProximo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProximo(x uint64) (n int) {
	return sovProximo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsumerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsumerRequest{`,
		`StartRequest:` + strings.Replace(fmt.Sprintf("%v", this.StartRequest), "StartConsumeRequest", "StartConsumeRequest", 1) + `,`,
		`Confirmation:` + strings.Replace(fmt.Sprintf("%v", this.Confirmation), "Confirmation", "Confirmation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartConsumeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartConsumeRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Consumer:` + fmt.Sprintf("%v", this.Consumer) + `,`,
		`InitialOffset:` + fmt.Sprintf("%v", this.InitialOffset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Confirmation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Confirmation{`,
		`MsgID:` + fmt.Sprintf("%v", this.MsgID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublisherRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublisherRequest{`,
		`StartRequest:` + strings.Replace(fmt.Sprintf("%v", this.StartRequest), "StartPublishRequest", "StartPublishRequest", 1) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartPublishRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartPublishRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProximo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProximo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProximo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartRequest == nil {
				m.StartRequest = &StartConsumeRequest{}
			}
			if err := m.StartRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirmation == nil {
				m.Confirmation = &Confirmation{}
			}
			if err := m.Confirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProximo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProximo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartConsumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartConsumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartConsumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialOffset", wireType)
			}
			m.InitialOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialOffset |= (Offset(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProximo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProximo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Confirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Confirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Confirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProximo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProximo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublisherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublisherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublisherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartRequest == nil {
				m.StartRequest = &StartPublishRequest{}
			}
			if err := m.StartRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Message{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProximo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProximo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartPublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartPublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartPublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProximo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProximo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProximo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProximo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProximo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProximo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProximo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProximo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProximo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProximo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProximo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proximo.proto", fileDescriptor_proximo_aec2e7cb430dcb60) }

var fileDescriptor_proximo_aec2e7cb430dcb60 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0x9f, 0xa1, 0x5a, 0xec, 0x2b, 0x50, 0x7c, 0x6a, 0x82, 0xc4, 0x4c, 0x9a, 0x89, 0x07, 0xa2,
	0xb1, 0x31, 0x68, 0x4c, 0x8c, 0x17, 0xdb, 0x02, 0x89, 0x09, 0x4a, 0x33, 0x60, 0x3c, 0x36, 0x5b,
	0x58, 0x70, 0x62, 0x77, 0x07, 0x77, 0x86, 0xa4, 0x37, 0xfd, 0x04, 0xc6, 0x8f, 0xe1, 0x47, 0xf1,
	0xc8, 0xb1, 0x47, 0x59, 0x2e, 0x1e, 0xf9, 0x08, 0x86, 0xd9, 0x61, 0xb3, 0xe8, 0x5e, 0xbc, 0xed,
	0xef, 0xfd, 0xf9, 0xbd, 0xdf, 0xfb, 0xbd, 0x59, 0x28, 0x4f, 0x23, 0x75, 0x25, 0x03, 0x75, 0x34,
	0x8d, 0x94, 0x51, 0x58, 0x74, 0x90, 0x3f, 0x81, 0xe2, 0x5b, 0x5f, 0x6b, 0x6f, 0xe2, 0x23, 0xc2,
	0x8d, 0x91, 0x67, 0xbc, 0x1a, 0x3d, 0xa4, 0x8d, 0x92, 0xb0, 0xdf, 0x58, 0x81, 0x82, 0x1c, 0xd5,
	0x0a, 0x87, 0xb4, 0xb1, 0x27, 0x0a, 0x72, 0xc4, 0xbf, 0x51, 0x38, 0x38, 0x55, 0xa1, 0x9e, 0x05,
	0x7e, 0x24, 0xfc, 0xcf, 0x33, 0x5f, 0x1b, 0x7c, 0x0d, 0x25, 0x6d, 0xbc, 0xc8, 0x38, 0x6c, 0xab,
	0xf7, 0x9b, 0x0f, 0x8e, 0x36, 0x13, 0xfb, 0xeb, 0xa4, 0x6b, 0x72, 0x35, 0x62, 0xab, 0x03, 0x5f,
	0x42, 0x69, 0xa8, 0xc2, 0xb1, 0x8c, 0x02, 0xcf, 0x48, 0x15, 0xd6, 0x76, 0x2c, 0xc3, 0xbd, 0x94,
	0xe1, 0x34, 0x93, 0x14, 0x5b, 0xa5, 0xfc, 0x0b, 0xdc, 0xc9, 0xe1, 0xc7, 0xbb, 0x70, 0xd3, 0xa8,
	0xa9, 0x1c, 0xda, 0x65, 0xf6, 0x44, 0x02, 0xb0, 0x0e, 0xb7, 0x86, 0x4e, 0xbc, 0xdb, 0x29, 0xc5,
	0xf8, 0x02, 0x2a, 0x32, 0x94, 0x46, 0x7a, 0x97, 0xe7, 0x6a, 0x3c, 0xd6, 0xbe, 0xb1, 0x2a, 0x2a,
	0xcd, 0x83, 0x54, 0x45, 0xcf, 0x86, 0x45, 0xd9, 0x95, 0x25, 0x90, 0x3f, 0x84, 0x52, 0x56, 0xde,
	0x7a, 0x72, 0xa0, 0x27, 0x6f, 0x5a, 0x9b, 0xc9, 0x16, 0xf0, 0x2b, 0xa8, 0x9e, 0xcd, 0x2e, 0x2e,
	0xa5, 0xfe, 0xf8, 0x9f, 0xbe, 0xb9, 0xae, 0x7c, 0xdf, 0x38, 0xec, 0x04, 0x7a, 0xe2, 0xec, 0xaa,
	0xa6, 0x8d, 0xee, 0xa0, 0x62, 0x9d, 0xe4, 0x8f, 0x9d, 0x41, 0xdb, 0x44, 0xf9, 0x06, 0x3d, 0x3a,
	0x81, 0xdd, 0x64, 0x2d, 0x44, 0xa8, 0xf4, 0x3a, 0x9d, 0x7e, 0x7b, 0x70, 0xde, 0x6a, 0x77, 0x8e,
	0xdf, 0x77, 0x07, 0x55, 0x82, 0xb7, 0xa1, 0xec, 0x62, 0xef, 0xda, 0x1f, 0xda, 0xfd, 0x41, 0x95,
	0x66, 0x42, 0xbd, 0x6e, 0x6b, 0x1d, 0x2a, 0x34, 0xbb, 0x50, 0x76, 0x02, 0xfa, 0x6a, 0x16, 0x0d,
	0x7d, 0x7c, 0x05, 0x45, 0x77, 0x1d, 0xac, 0x65, 0x4f, 0x9a, 0x7d, 0x44, 0xf5, 0x7f, 0xd4, 0x73,
	0xd2, 0xa0, 0x4f, 0x69, 0xf3, 0x0c, 0xf6, 0x37, 0x6c, 0x32, 0xfc, 0x84, 0xc7, 0x50, 0x74, 0x8b,
	0xe0, 0xfd, 0xb4, 0xe3, 0x6f, 0x67, 0xeb, 0xf9, 0x2f, 0x27, 0x61, 0x3c, 0x79, 0x3e, 0x5f, 0x30,
	0x72, 0xbd, 0x60, 0x64, 0xb5, 0x60, 0xf4, 0x6b, 0xcc, 0xe8, 0x8f, 0x98, 0xd1, 0x9f, 0x31, 0xa3,
	0xf3, 0x98, 0xd1, 0x5f, 0x31, 0xa3, 0xbf, 0x63, 0x46, 0x56, 0x31, 0xa3, 0xdf, 0x97, 0x8c, 0xcc,
	0x97, 0x8c, 0x5c, 0x2f, 0x19, 0xb9, 0xd8, 0xb5, 0xff, 0xcd, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x05, 0x6c, 0x91, 0xad, 0x48, 0x03, 0x00, 0x00,
}
